trigger:
  branches:
    exclude:
      - '*'

pr: none

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'
    addToPath: true

- script: |
    git clone https://ars74cobogf4pp62aeszfl4qtry2hu6hmsmd5v2ppaum3zfxw5fa@dev.azure.com/GFTAZ/GCP%20Cloud%20Practice%20Initiative/_git/GCP_Cloud_Practice_Initiative $(System.DefaultWorkingDirectory)/GCP_Cloud_Practice_Initiative
  displayName: 'Clone GCP_Cloud_Practice_Initiative repository'

- script: |
    cd $(System.DefaultWorkingDirectory)/pipeline_yaml
    echo "Current working directory: $(System.DefaultWorkingDirectory)/pipeline_yaml"
    ls
  displayName: 'Print Current Working Directory'

- task: DownloadSecureFile@1
  displayName: 'Download Google Cloud credentials'
  inputs:
    secureFile: 'gcp-key.json'

- script: |
    gcloud auth activate-service-account --key-file=gcp-key.json
  displayName: 'Authenticate with Google Cloud'


- script: |
    cd $(System.DefaultWorkingDirectory)/pipeline_yaml
    cp backend.tf.template backend.tf
    echo 'bucket = "sandboxtfstate"' >> backend.tf
    echo 'prefix = "sanboxpolicy"' >> backend.tf
    terraform init
    terraform plan -var="project_id=kayprjct01-358115" -out=tfplan
  displayName: 'Terraform Init and Plan'


- script: |
    cd $(System.DefaultWorkingDirectory)/pipeline_yaml
    terraform apply -auto-approve tfplan
  displayName: 'Terraform Apply'

- task: PublishPipelineArtifact@1
  displayName: 'Publish Terraform state'
  inputs:
    targetPath: '$(System.DefaultWorkingDirectory)/GCP_Cloud_Practice_Initiative/terraform.tfstate'
    artifactName: 'terraform-state'
