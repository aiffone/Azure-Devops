trigger:
  branches:
    exclude:
      - '*'

pr: none

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: DownloadSecureFile@1
  name: gcpCreds
  inputs:
    secureFile: 'gcp-key.json'

- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'
    addToPath: true

- script: |
    mkdir $(System.DefaultWorkingDirectory)/terraform-installation
    cd $(System.DefaultWorkingDirectory)/terraform-installation
    echo "#!/bin/bash" > install_terraform.sh
    echo "curl -LO https://releases.hashicorp.com/terraform/1.0.0/terraform_1.0.0_linux_amd64.zip" >> install_terraform.sh
    echo "unzip terraform_1.0.0_linux_amd64.zip" >> install_terraform.sh
    echo "chmod +x terraform" >> install_terraform.sh
    echo "sudo mv terraform /usr/local/bin/" >> install_terraform.sh
  displayName: 'Create Terraform installation script'

- script: |
    gcloud auth activate-service-account --key-file=$(gcpCreds.secureFilePath)
  displayName: 'Authenticate with Google Cloud'

- task: PublishPipelineArtifact@1
  displayName: 'Publish Terraform installation script'
  inputs:
    targetPath: '$(System.DefaultWorkingDirectory)/terraform-installation'
    artifactName: 'terraform-installation'

- script: |
    cd $(System.DefaultWorkingDirectory)/terraform-installation
    chmod +x install_terraform.sh
    ./install_terraform.sh
  displayName: 'Install Terraform'

- script: |
    cd $(System.DefaultWorkingDirectory)/pipeline_yaml
    terraform init
    terraform init -reconfigure
    terraform plan -var="project_id=kayprjct01-358115" -out=tfplan
  displayName: 'Terraform Init and Plan'

- script: |
    cd $(System.DefaultWorkingDirectory)/pipeline_yaml
    terraform apply -auto-approve tfplan
  displayName: 'Terraform Apply'

- task: PublishPipelineArtifact@1
  displayName: 'Publish Terraform state'
  inputs:
    targetPath: '$(System.DefaultWorkingDirectory)/GCP_Cloud_Practice_Initiative/terraform.tfstate'
    artifactName: 'terraform-state'
